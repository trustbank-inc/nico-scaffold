<?php
/** @noinspection NonAsciiCharacters */
declare(strict_types=1);

namespace {{ namespace }};

use App\Contexts\{{ context }}\UseCase\{{ entity }}\Destroy\Input;
use App\Contexts\{{ context }}\UseCase\{{ entity }}\Destroy\Interactor;
use App\Models\{{ model }} as {{ model }}Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

final class DestroyTest extends TestCase
{
    use RefreshDatabase;

    /**
     * @test
     */
    public function エンティティが削除できること()
    {
        /** @var {{ model }}Model $row */
        $rows = {{ model }}Model::factory()
            ->count(2)
            ->create()
            ->toArray();

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $interactor->execute(Input::fromArray([
            'id' => $rows[0]['id'],
        ]));
        $interactor->execute(Input::fromArray([
            'id' => $rows[1]['id'],
        ]));

        $this->assertDatabaseCount('{{ table }}', 0);
    }

    /**
     * @test
     */
    public function 削除対象以外のエンティティに影響がないこと()
    {
        /** @var {{ model }}Model $row */
        $rows = {{ model }}Model::factory()
            ->count(2)
            ->create()
            ->toArray();

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $interactor->execute(Input::fromArray([
            'id' => $rows[0]['id'],
        ]));

        $this->assertDatabaseMissing('{{ table }}', [
            'id' => $rows[0]['id'],
        ]);
        $this->assertDatabaseHas('{{ table }}', [
            'id' => $rows[1]['id'],
        ]);
    }

    /**
     * @test
     */
    public function 削除済みのエンティティを削除してもエラーにならないこと()
    {
        /** @var {{ model }}Model $row */
        $rows = {{ model }}Model::factory()
            ->count(1)
            ->create()
            ->toArray();

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $interactor->execute(Input::fromArray([
            'id' => $rows[0]['id'],
        ]));
        // もう一度削除
        $interactor->execute(Input::fromArray([
            'id' => $rows[0]['id'],
        ]));

        $this->assertDatabaseMissing('{{ table }}', [
            'id' => $rows[0]['id'],
        ]);
    }
}
