<?php
/** @noinspection NonAsciiCharacters */
declare(strict_types=1);

namespace {{ namespace }};

use App\Contexts\{{ context }}\Domain\Exception\{{ entity }}NotFoundException;
use App\Contexts\{{ context }}\UseCase\{{ entity }}\Update\Input;
use App\Contexts\{{ context }}\UseCase\{{ entity }}\Update\Interactor;
use App\Models\{{ model }} as {{ model }}Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * 更新のテスト
 */
final class UpdateTest extends TestCase
{
    use WithFaker;
    use RefreshDatabase;

    /**
     * @test
     */
    public function エンティティが更新できること()
    {
        /** @var {{ model }}Model $row */
        $rows = {{ model }}Model::factory()
            ->count(1)
            ->create()
            ->toArray();

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $interactor->execute(Input::fromArray([
            'id' => $rows[0]['id'],
            'name' => '更新テスト',
            /** TODO add fields */
        ]));

        $this->assertDatabaseCount(table: '{{ table }}', count: 1);
        $this->assertDatabaseHas(table: '{{ table }}', data: ['name' => '更新テスト']);
        /** TODO assert fields */
    }

    /**
     * @test
     */
    public function 存在しないエンティティの更新でエラーとなること()
    {
        $this->expectException({{ entity }}NotFoundException::class);

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $interactor->execute(Input::fromArray([
            'id' => 'dummy',
            'name' => '更新テスト',
        ]));
    }
}
