<?php
/** @noinspection NonAsciiCharacters */
declare(strict_types=1);

namespace {{ namespace }};

use Illuminate\Database\Eloquent\Factories\Sequence;
use App\Contexts\{{ context }}\Domain\Entity\{{ entity }};
use App\Contexts\{{ context }}\UseCase\{{ entity }}\Index\Input;
use App\Contexts\{{ context }}\UseCase\{{ entity }}\Index\Interactor;
use App\Models\{{ model }} as {{ model }}Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

/**
 * 一覧取得のテスト
 */
final class IndexTest extends TestCase
{
    use WithFaker;
    use RefreshDatabase;

    /**
     * @test
     */
    public function エンティティの一覧が取得できること()
    {
        $rows = {{ model }}Model::factory()
            ->count(10) // ページングされない程度
            ->create()
            ->toArray();

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $output = $interactor->execute(Input::fromArray(input: []));
        /** @var {{ entity }} $entity */
        foreach ($output->getList() as $index => $entity) {
            $this->assertEquals(
                expected: $rows[$index]['id'],
                actual: $entity->getId()->getValue());
            $this->assertEquals(
                expected: $rows[$index]['name'],
                actual: $entity->getName()->getValue());
        }
    }

    /**
     * @test
     */
    public function エンティティが0件でもエラーにならないこと()
    {
        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $output = $interactor->execute(Input::fromArray(input: []));
        $this->assertCount(0, iterator_to_array($output->getList()));
    }

    /**
     * @test
     * @note 10件のテストデータを用意し、3件ずつのページネーションをテストする
     */
    public function ページ分割されたエンティティの一覧が取得できること()
    {
        $rows = {{ model }}Model::factory()
            ->count(10)
            ->create()
            ->toArray();

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $page1 = $interactor->execute(Input::fromArray(['limit' => 3, 'page' => 1]));
        $page1Items = iterator_to_array($page1->getList());
        $this->assertSame(10, $page1->getList()->getTotal());
        $this->assertCount(3, $page1Items);
        $this->assertEquals(
            expected: $rows[0]['id'],
            actual: $page1Items[0]->getId()); // データの一致はIDだけで行う

        $page2 = $interactor->execute(Input::fromArray(['limit' => 3, 'page' => 2]));
        $page2Items = iterator_to_array($page2->getList());
        $this->assertSame(10, $page2->getList()->getTotal());
        $this->assertCount(3, $page2Items);
        $this->assertEquals(
            expected: $rows[3]['id'],
            actual: $page2Items[0]->getId()); // データの一致はIDだけで行う

        $page3 = $interactor->execute(Input::fromArray(['limit' => 3, 'page' => 3]));
        $page3Items = iterator_to_array($page3->getList());
        $this->assertSame(10, $page3->getList()->getTotal());
        $this->assertCount(3, $page3Items);
        $this->assertEquals(
            expected: $rows[6]['id'],
            actual: $page3Items[0]->getId()); // データの一致はIDだけで行う

        $page4 = $interactor->execute(Input::fromArray(['limit' => 3, 'page' => 4]));
        $page4Items = iterator_to_array($page4->getList());
        $this->assertSame(10, $page4->getList()->getTotal());
        $this->assertCount(1, $page4Items); // 最終ページの件数もちゃんと合っていること
        $this->assertEquals(
            expected: $rows[9]['id'],
            actual: $page4Items[0]->getId()); // データの一致はIDだけで行う
    }

    /**
     * @test
     */
    public function フレーズで前方一致検索ができること()
    {
        // 検索対象外のデータ
        {{ model }}Model::factory()
            ->count(30)
            ->create();

        // 検索対象のデータ
        $phrase = '検索テスト***';
        {{ model }}Model::factory()
            ->count(3)
            ->state(new Sequence(
                ['name' => $this->faker->name . $phrase],
                ['name' => $phrase . $this->faker->name],
                ['name' => $phrase . $this->faker->name . $phrase],
            ))
            ->create()
            ->toArray();

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $output = $interactor->execute(Input::fromArray(['search_phrase' => '|検索テスト']));

        // 復元したデータの件数が正しいこと
        $this->assertEquals(2, $output->getList()->getTotal());
    }

    /**
     * @test
     */
    public function フレーズで後方一致検索ができること()
    {
        // 検索対象外のデータ
        {{ model }}Model::factory()
            ->count(30)
            ->create();

        // 検索対象のデータ
        $phrase = '***検索テスト';
        {{ model }}Model::factory()
            ->count(3)
            ->state(new Sequence(
                ['name' => $this->faker->name . $phrase],
                ['name' => $phrase . $this->faker->name],
                ['name' => $phrase . $this->faker->name . $phrase],
            ))
            ->create()
            ->toArray();

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $output = $interactor->execute(Input::fromArray(['search_phrase' => '検索テスト|']));

        // 復元したデータの件数が正しいこと
        $this->assertEquals(2, $output->getList()->getTotal());
    }

    /**
     * @test
     */
    public function フレーズで中間一致検索ができること()
    {
        // 検索対象外のデータ
        {{ model }}Model::factory()
            ->count(30)
            ->create();

        // 検索対象のデータ
        $phrase = '***検索テスト***';
        {{ model }}Model::factory()
            ->count(3)
            ->state(new Sequence(
                ['name' => $this->faker->name . $phrase],
                ['name' => $phrase . $this->faker->name],
                ['name' => $phrase . $this->faker->name . $phrase],
            ))
            ->create()
            ->toArray();

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $output = $interactor->execute(Input::fromArray(['search_phrase' => '検索テスト']));

        // 復元したデータの件数が正しいこと
        $this->assertEquals(3, $output->getList()->getTotal());
    }

    /**
     * @test
     */
    public function フレーズで完全一致検索ができること()
    {
        // 検索対象外のデータ
        {{ model }}Model::factory()
            ->count(30)
            ->create();

        // 検索対象のデータ
        $phrase = '***検索テスト***';
        {{ model }}Model::factory()
            ->count(3)
            ->state(new Sequence(
                ['name' => $this->faker->name . $phrase],
                ['name' => $phrase],
                ['name' => $phrase . $this->faker->name . $phrase],
            ))
            ->create()
            ->toArray();

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $output = $interactor->execute(Input::fromArray(['search_phrase' => '|***検索テスト***|']));

        // 復元したデータの件数が正しいこと
        $this->assertEquals(1, $output->getList()->getTotal());
    }
}
