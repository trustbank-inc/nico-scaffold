<?php
/** @noinspection NonAsciiCharacters */
declare(strict_types=1);

namespace {{ namespace }};

use App\Contexts\{{ context }}\Domain\Exception\{{ entity }}NotFoundException;
use App\Contexts\{{ context }}\UseCase\{{ entity }}\Detail\Input;
use App\Contexts\{{ context }}\UseCase\{{ entity }}\Detail\Interactor;
use App\Models\{{ model }} as {{ model }}Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

final class DetailTest extends TestCase
{
    use WithFaker;
    use RefreshDatabase;

    /**
     * @test
     */
    public function エンティティの詳細が取得できること()
    {
        /** @var {{ model }}Model $row */
        $row = {{ model }}Model::factory()
            ->count(1)
            ->create()
            ->first();

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $output = $interactor->execute(Input::fromArray([
            'id' => $row->getAttribute('id'),
        ]));

        $this->assertEquals(
            expected: $row->getAttribute('id'),
            actual: $output->getEntity()->getId()->getValue());
        $this->assertEquals(
            expected: $row->getAttribute('name'),
            actual: $output->getEntity()->getName()->getValue());
    }

    /**
     * @test
     */
    public function 存在しないIDを指定するとエラーになること()
    {
        $this->expectException({{ entity }}NotFoundException::class);

        /** @var {{ model }}Model $row */
        $row = {{ model }}Model::factory()
            ->count(1)
            ->create()
            ->first();

        /** @var Interactor $interactor */
        $interactor = resolve(Interactor::class);
        $interactor->execute(Input::fromArray([
            'id' => '***invalid-id***',
        ]));
    }
}
