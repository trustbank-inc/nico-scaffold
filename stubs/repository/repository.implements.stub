<?php

declare(strict_types=1);

namespace {{ namespace }};

use App\Contexts\{{ context }}\Domain\Entity\{{ entity }};
use App\Contexts\{{ context }}\Domain\Exception\{{ entity }}NotFoundException;
use App\Contexts\{{ context }}\Domain\Persistence\{{ entity }}Repository;
use App\Contexts\{{ context }}\Domain\Persistence\{{ entity }}RepositoryRecord;
use App\Models;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Support\Facades\DB;

/**
 * データベースへの永続化の実装
 */
final class {{ class }} implements {{ entity }}Repository
{
    /**
     * @inheritDoc
     */
    public function save({{ entity }}RepositoryRecord $record): void
    {
        DB::transaction(function () use ($record) {
            $row = Models\{{ model }}::query()->findOrNew($record->getId()->getValue());
            $row->fill([
                'id' => $record->getId()->getValue(),
                'name' => $record->getName()->getValue(),
                /** TODO add fields */
            ]);
            $row->saveOrFail();
        });
    }

    /**
     * @inheritDoc
     */
    public function restore({{ entity }}\Id $id): {{ entity }}RepositoryRecord
    {
        try {
            return new class($id) implements {{ entity }}RepositoryRecord
            {
                private array $row;

                public function __construct({{ entity }}\Id $id)
                {
                    $this->row = Models\{{ model }}::query()
                        ->findOrFail($id->getValue())
                        ->toArray();
                }

                public function getId(): {{ entity }}\Id
                {
                    return {{ entity }}\Id::fromString($this->row['id']);
                }

                public function getName(): {{ entity }}\Name
                {
                    return {{ entity }}\Name::fromString($this->row['name'] ?? '');
                }

                /** TODO add fields */
            };
        } catch (ModelNotFoundException) {
            throw new {{ entity }}NotFoundException();
        }
    }

    /**
     * @inheritDoc
     */
    public function destroy({{ entity }}\Id $id): void
    {
        DB::transaction(function () use ($id) {
            try {
                Models\{{ model }}::query()
                    ->findOrFail($id->getValue())
                    ->delete();
            } catch (ModelNotFoundException) {
                // すでに存在しなければ何もしない
            }
        });
    }

    /**
     * @inheritDoc
     */
    public function exists({{ entity }}\Id $id): bool
    {
        return Models\{{ model }}::query()
            ->where('id', $id->getValue())
            ->exists();
    }
}
