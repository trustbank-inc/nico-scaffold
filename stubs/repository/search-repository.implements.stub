<?php

declare(strict_types=1);

namespace {{ namespace }};

use App\Contexts\{{ context }}\Domain\Persistence\Search{{ entity }}ListRepository;
use App\Models;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Seasalt\Nicoca\Components\Infrastructure\Persistence\HasSearchPhrase;
use Seasalt\Nicoca\Components\Infrastructure\Persistence\PaginatorCreatable;
use Seasalt\Nicoca\Components\UseCase\CurrentPage;
use Seasalt\Nicoca\Components\UseCase\LimitPerPage;
use Seasalt\Nicoca\Components\UseCase\SearchPhrase;
use Traversable;

final class {{ class }} implements Search{{ entity }}ListRepository
{
    use HasSearchPhrase;
    use PaginatorCreatable;
    use {{ entity }}RecordCreatable;

    /** @var LengthAwarePaginator */
    private LengthAwarePaginator $paginator;

    /**
     * @param SearchPhrase|null $searchPhrase
     * @param LimitPerPage|null $limit
     * @param CurrentPage|null $currentPage
     * @return void
     */
    public function restore(
        SearchPhrase|null $searchPhrase = null,
        LimitPerPage|null $limit = null,
        CurrentPage|null $currentPage = null): void
    {
        $builder = Models\{{ model }}::query();
        $this->buildSearchPhraseWhereClauses($builder, $searchPhrase, [
            'name',
            /** TODO add fields */
        ]);
        $this->paginator = $builder->paginate(
            perPage: $limit?->getValue(),
            page: $currentPage?->getValue());
    }

    /**
     * @inheritDoc
     */
    public function getIterator(): Traversable
    {
        foreach ($this->paginator as $row) {
            yield $this->create{{ entity }}Record($row->toArray());
        }
    }

    /**
     * @inheritDoc
     */
    public function getTotal(): int
    {
        return $this->paginator->total();
    }

    /**
     * @inheritDoc
     */
    public function getLimit(): int
    {
        return $this->paginator->perPage();
    }

    /**
     * @inheritDoc
     */
    public function getCurrentPage(): int
    {
        return $this->paginator->currentPage();
    }

    /**
     * @inheritDoc
     */
    public function getLastPage(): int
    {
        return $this->paginator->lastPage();
    }

    /**
     * @inheritDoc
     */
    public function hasMorePages(): bool
    {
        return $this->paginator->hasMorePages();
    }
}
