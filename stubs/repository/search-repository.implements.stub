<?php
declare(strict_types=1);

namespace {{ namespace }};

use Seasalt\NicoScaffold\Components\Domain\Persistence\Paginator;
use Seasalt\NicoScaffold\Components\Domain\ValueObject\CurrentPage;
use Seasalt\NicoScaffold\Components\Domain\ValueObject\LimitPerPage;
use Seasalt\NicoScaffold\Components\Domain\ValueObject\SearchPhrase;
use Seasalt\NicoScaffold\Components\Infrastructure\Persistence\HasSearchPhrase;
use Seasalt\NicoScaffold\Components\Infrastructure\Persistence\Paginatable;
use App\Contexts\{{ context }}\Domain\Entity\{{ entity }}\{{ entity }}Id;
use App\Contexts\{{ context }}\Domain\Entity\{{ entity }}\Title;
use App\Contexts\{{ context }}\Domain\Persistence\{{ entity }}RepositoryRecord;
use App\Contexts\{{ context }}\Domain\Persistence\Search{{ entity }}ListRepository;
use App\Models\{{ model }} as {{ model }}Model;

final class {{ class }} implements Search{{ entity }}ListRepository
{
    use HasSearchPhrase;
    use Paginatable;

    /**
     * @var SearchPhrase
     */
    private SearchPhrase $searchPhrase;

    /**
     * @var LimitPerPage
     */
    private LimitPerPage $limit;

    /**
     * @var CurrentPage
     */
    private CurrentPage $currentPage;

    /**
     * @param SearchPhrase $searchPhrase
     */
    public function setSearchPhrase(SearchPhrase $searchPhrase): void
    {
        $this->searchPhrase = $searchPhrase;
    }

    /**
     * @param LimitPerPage $limit
     */
    public function setLimit(LimitPerPage $limit): void
    {
        $this->limit = $limit;
    }

    /**
     * @param CurrentPage $currentPage
     */
    public function setCurrentPage(CurrentPage $currentPage): void
    {
        $this->currentPage = $currentPage;
    }

    /**
     * @return Paginator
     */
    public function restore(): Paginator
    {
        $builder = {{ model }}Model::query();
        $this->buildSearchPhraseWhereClauses($builder, $this->searchPhrase, [
            'title',
            /** TODO add fields */
        ]);
        $paginator = $builder->paginate(
            perPage: $this->limit->getValue(),
            page: $this->currentPage->getValue());
        $records = [];
        /** @var {{ model }}Model $row */
        foreach ($paginator as $row) {
            $records[] = $this->createRecord($row->toArray());
        }
        return $this->createPaginator(
            records: $records,
            total: $paginator->total(),
            limit: $paginator->perPage(),
            currentPage: $paginator->currentPage(),
            lastPage: $paginator->lastPage());
    }

    /**
     * 行データからエンティティ向けのレコードを作成する
     *
     * @param array $row
     * @return {{ entity }}RepositoryRecord
     */
    private function createRecord(array $row): {{ entity }}RepositoryRecord
    {
        return new class($row) implements {{ entity }}RepositoryRecord
        {
            public function __construct(private array $row)
            {

            }

            public function getId(): {{ entity }}Id
            {
                return {{ entity }}Id::fromString($this->row['id']);
            }

            public function getTitle(): Title
            {
                return Title::fromString($this->row['title'] ?? '');
            }
        };
    }
}
