<?php

declare(strict_types=1);

namespace App\Contexts\{{ context }}\Domain\Entity;

use Seasalt\Nicoca\Components\Domain\Persistence\IdGenerator;
use App\Contexts\{{ context }}\Domain\Persistence\{{ entity }}ListRepository;
use App\Contexts\{{ context }}\Domain\Persistence\{{ entity }}Repository;
use App\Contexts\{{ context }}\Domain\Persistence\{{ entity }}Record;
use JsonSerializable;
use Traversable;

/**
 * TODO add description
 */
final class {{ entity }} implements JsonSerializable
{
    /**
     * newによるインスタンス化はさせない
     *
     * @param {{ entity }}\Id $id
     * @param {{ entity }}\Name $name
     * @see create()
     * @see restore()
     * @see restoreList()
     */
    private function __construct(
        private {{ entity }}\Id $id,
        private {{ entity }}\Name $name,
        /** TODO add fields */
        )
    {

    }

    /**
     * @return {{ entity }}\Id
     */
    public function getId(): {{ entity }}\Id
    {
        return $this->id;
    }

    /**
     * @return {{ entity }}\Name
     */
    public function getName(): {{ entity }}\Name
    {
        return $this->name;
    }

    /**
     * @param {{ entity }}\Name $name
     */
    public function setName({{ entity }}\Name $name): void
    {
        $this->name = $name;
    }

    /**
     * @return array
     */
    public function jsonSerialize(): array
    {
        return get_object_vars($this);
    }

    /**
     * 新規のエンティティを作成する
     *
     * @param {{ entity }}\Name $name 名前
     * @param IdGenerator $idGenerator IDジェネレータ
     * @return self
     */
    public static function create(
        {{ entity }}\Name $name,
        /** TODO add fields */
        IdGenerator $idGenerator): self
    {
        return new self(
            {{ entity }}\Id::generate($idGenerator),
            $name
            /** TODO add fields */
        );
    }

    /**
     * 永続化されたエンティティを復元する
     *
     * @param {{ entity }}\Id $id エンティティID
     * @param {{ entity }}Repository $repository リポジトリ
     * @return self
     */
    public static function restore(
        {{ entity }}\Id $id,
        {{ entity }}Repository $repository): self
    {
        return self::restoreFromRecord($repository->restore($id));
    }

    /**
     * エンティティを永続化する
     *
     * @param {{ entity }}Repository $repository リポジトリ
     */
    public function save(
        {{ entity }}Repository $repository): void
    {
        // {{ entity }}が直接{{ entity }}Recordをimplementsしない
        $record = new class($this->id, $this->name) implements {{ entity }}Record
        {
            public function __construct(
                private {{ entity }}\Id $id,
                private {{ entity }}\Name $name)
            {

            }

            public function getId(): {{ entity }}\Id { return $this->id; }
            public function getName(): {{ entity }}\Name { return $this->name; }
            /** TODO add fields */
        };
        $repository->save($record);
    }

    /**
     * 永続化されたエンティティのリストを復元する
     *
     * @param {{ entity }}ListRepository $repository
     * @return {{ entity }}List
     */
    public static function restoreList({{ entity }}ListRepository $repository): {{ entity }}List
    {
        $paginator = $repository->restore();
        $entities = self::restoreFromRecords($paginator->getRecords());
        return new class(
            $entities,
            $paginator->getTotal(),
            $paginator->getLimit(),
            $paginator->getCurrentPage()) implements {{ entity }}List
        {
            public function __construct(
                private Traversable $entities,
                private int $total,
                private int $limit,
                private int $currentPage) {}
            public function getIterator(): Traversable { return $this->entities; }
            public function getTotal(): int { return $this->total; }
            public function getLimit(): int { return $this->limit; }
            public function getCurrentPage(): int { return $this->currentPage; }
            public function jsonSerialize(): array { return iterator_to_array($this->entities); }
        };
    }

    /**
     * 永続化されたエンティティを削除する
     *
     * @param {{ entity }}\Id $id
     * @param {{ entity }}Repository $repository
     */
    public static function destroy(
        {{ entity }}\Id $id,
        {{ entity }}Repository $repository): void
    {
        $repository->destroy($id);
    }

    /**
     * リポジトリの返すデータからエンティティのリストを復元する
     *
     * @param {{ entity }}Record[] $records
     * @return Traversable
     */
    private static function restoreFromRecords(array $records): Traversable
    {
        foreach ($records as $record) {
            yield self::restoreFromRecord($record);
        }
    }

    /**
     * リポジトリの返すデータからエンティティを復元する
     *
     * @param {{ entity }}Record $record
     * @return self
     */
    private static function restoreFromRecord({{ entity }}Record $record): self
    {
        return new self(
            id: $record->getId(),
            name: $record->getName(),
            /** TODO add fields */
        );
    }
}
