<?php
/** @noinspection NonAsciiCharacters */
declare(strict_types=1);

namespace {{ namespace }};

use App\Models\{{ model }} as {{ model }}Model;
use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Sequence;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

final class {{ class }} extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    /**
     * @test
     */
    public function 一覧が取得できること()
    {
        $entities = {{ model }}Model::factory()
            ->count(10) // ページングされない程度
            ->create()
            ->toArray();

        $this->actingAs(new User());

        $response = $this->getJson('/api/{{ uri }}');
        $response->assertOk();
        $this->assertEquals($entities, $response->json('data'));
        $this->assertEquals(10, $response->json('total'));
    }

    /**
     * @test
     */
    public function 一覧をページ分割して取得できること()
    {
        $entities = {{ model }}Model::factory()
            ->count(30)
            ->create()
            ->toArray();

        $this->actingAs(new User());

        // 最初のページ
        $response = $this->getJson('/api/{{ uri }}?limit=12');
        $this->assertEquals(array_slice($entities, 0, 12), $response->json('data'));
        $this->assertEquals(30, $response->json('total'));
        $this->assertEquals(12, $response->json('per_page'));
        $this->assertEquals(1, $response->json('current_page'));

        // 次ページ
        $response = $this->getJson($response->json('next_page_url'));
        $this->assertEquals(array_slice($entities, 12, 12), $response->json('data'));
        $this->assertEquals(30, $response->json('total'));
        $this->assertEquals(12, $response->json('per_page'));
        $this->assertEquals(2, $response->json('current_page'));

        // 次ページ
        $response = $this->getJson($response->json('next_page_url'));
        $this->assertEquals(array_slice($entities, 24), $response->json('data'));
        $this->assertEquals(30, $response->json('total'));
        $this->assertEquals(12, $response->json('per_page'));
        $this->assertEquals(3, $response->json('current_page'));

        // 次ページが無い
        $this->assertNull($response->json('next_page_url'));
    }

    /**
     * @test
     */
    public function 検索フレーズで絞り込めること()
    {
        // 検索対象外のデータ
        {{ model }}Model::factory()
            ->count(30)
            ->create();

        // 検索対象のデータ
        $phrase = '***検索テスト***';
        $entities = {{ model }}Model::factory()
            ->count(3)
            ->state(new Sequence(
                ['title' => $this->faker->name . $phrase],
                ['title' => $phrase . $this->faker->name],
                ['title' => $phrase . $this->faker->name . $phrase],
            ))
            ->create()
            ->toArray();

        $this->actingAs(new User());

        $response = $this->getJson('/api/{{ uri }}?search_phrase=' . $phrase);
        $response->assertOk();
        $this->assertEquals($entities, $response->json('data'));
        $this->assertEquals(3, $response->json('total'));
    }

    /**
     * @test
     */
    public function 検索フレーズの文字数オーバーでエラーになること()
    {
        $this->actingAs(new User());

        // 全角文字で100文字オーバー
        $phrase = implode('', array_pad([], 101, 'あ'));
        $response = $this->getJson('/api/{{ uri }}?search_phrase=' . $phrase);
        $response->assertStatus(422);
    }
}
