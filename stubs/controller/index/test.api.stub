<?php
/** @noinspection NonAsciiCharacters */
declare(strict_types=1);

namespace {{ namespace }};

use App\Models\{{ model }} as {{ model }}Model;
use App\Models\User;
use Illuminate\Database\Eloquent\Factories\Sequence;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

final class {{ class }} extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    private const API_TOKEN = '123456789012345678901234567890123456789012345678901234567890';

    public function setUp(): void
    {
        parent::setUp();

        $user = new User();
        $user->fill([
            'name' => 'test',
            'email' => $this->faker->safeEmail(),
            'password' => password_hash('test-password', PASSWORD_DEFAULT),
            'api_token' => self::API_TOKEN,
        ]);
        $user->save();
    }

    /**
     * @test
     */
    public function 一覧が取得できること()
    {
        $rows = {{ model }}Model::factory()
            ->count(10) // ページングされない程度
            ->create()
            ->toArray();

        $response = $this->getJson(
            uri: '/api/{{ uri }}',
            headers: [
                'Authorization' => 'Bearer ' . self::API_TOKEN,
            ]);
        $response->assertOk();
        $this->assertEquals($rows, $response->json('data'));
        $this->assertEquals(10, $response->json('total'));
    }

    /**
     * @test
     */
    public function 一覧をページ分割して取得できること()
    {
        $rows = {{ model }}Model::factory()
            ->count(30)
            ->create()
            ->toArray();

        // 最初のページ
        $response = $this->getJson(
            uri: '/api/{{ uri }}?limit=12',
            headers: [
                'Authorization' => 'Bearer ' . self::API_TOKEN,
            ]);
        $this->assertEquals(array_slice($rows, 0, 12), $response->json('data'));
        $this->assertEquals(30, $response->json('total'));
        $this->assertEquals(12, $response->json('per_page'));
        $this->assertEquals(1, $response->json('current_page'));

        // 次ページ
        $response = $this->getJson(
            uri: $response->json('next_page_url'),
            headers: [
                'Authorization' => 'Bearer ' . self::API_TOKEN,
            ]);
        $this->assertEquals(array_slice($rows, 12, 12), $response->json('data'));
        $this->assertEquals(30, $response->json('total'));
        $this->assertEquals(12, $response->json('per_page'));
        $this->assertEquals(2, $response->json('current_page'));

        // 次ページ
        $response = $this->getJson(
            uri: $response->json('next_page_url'),
            headers: [
                'Authorization' => 'Bearer ' . self::API_TOKEN,
            ]);
        $this->assertEquals(array_slice($rows, 24), $response->json('data'));
        $this->assertEquals(30, $response->json('total'));
        $this->assertEquals(12, $response->json('per_page'));
        $this->assertEquals(3, $response->json('current_page'));

        // 次ページが無い
        $this->assertNull($response->json('next_page_url'));
    }

    /**
     * @test
     */
    public function 検索フレーズで絞り込めること()
    {
        // 検索対象外のデータ
        {{ model }}Model::factory()
            ->count(30)
            ->create();

        // 検索対象のデータ
        $phrase = '***検索テスト***';
        $rows = {{ model }}Model::factory()
            ->count(3)
            ->state(new Sequence(
                ['title' => $this->faker->name . $phrase],
                ['title' => $phrase . $this->faker->name],
                ['title' => $phrase . $this->faker->name . $phrase],
            ))
            ->create()
            ->toArray();

        $response = $this->getJson(
            uri: '/api/{{ uri }}?search_phrase=' . $phrase,
            headers: [
                'Authorization' => 'Bearer ' . self::API_TOKEN,
            ]);
        $response->assertOk();
        $this->assertEquals($rows, $response->json('data'));
        $this->assertEquals(3, $response->json('total'));
    }

    /**
     * @test
     */
    public function 検索フレーズの文字数オーバーでエラーになること()
    {
        // 全角文字で100文字オーバー
        $phrase = implode('', array_pad([], 101, 'あ'));
        $response = $this->getJson(
            uri: '/api/{{ uri }}?search_phrase=' . $phrase,
            headers: [
                'Authorization' => 'Bearer ' . self::API_TOKEN,
            ]);
        $response->assertStatus(422);
    }
}
