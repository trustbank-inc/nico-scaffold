<?php
/** @noinspection NonAsciiCharacters */
declare(strict_types=1);

namespace {{ namespace }};

use App\Models\{{ model }} as {{ model }}Model;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Tests\TestCase;

final class {{ class }} extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    private const API_TOKEN = '123456789012345678901234567890123456789012345678901234567890';

    public function setUp(): void
    {
        parent::setUp();

        DB::table('users')->insert([
            'name' => 'test',
            'email' => $this->faker->safeEmail(),
            'password' => password_hash('test-password', PASSWORD_DEFAULT),
            'api_token' => self::API_TOKEN,
        ]);
    }

    /**
     * @test
     */
    public function 更新できること()
    {
        /** @var {{ model }}Model $row */
        $row = {{ model }}Model::factory()
            ->count(1)
            ->create()
            ->first();

        $response = $this->putJson(
            uri: "/api/{{ uri }}/{$row->getAttribute('id')}",
            data: [
                'name' => 'テスト',
                /** TODO add fields */
            ],
            headers: [
                'Authorization' => 'Bearer ' . self::API_TOKEN,
            ]);
        $response->assertOk();

        $table = (new {{ model }}Model())->getTable();
        $this->assertDatabaseCount(table: $table, count: 1);
        $this->assertDatabaseHas(table: $table, data: [
            'name' => 'テスト',
            /** TODO add fields */
        ]);
    }

    /**
     * @test
     */
    public function 存在しないIDを指定するとエラーになること()
    {
        $response = $this->putJson(
            uri: '/api/{{ uri }}/xxxxxxxx',
            data: [
                'name' => 'テスト',
                /** TODO add fields */
            ],
            headers: [
                'Authorization' => 'Bearer ' . self::API_TOKEN,
            ]);
        $response->assertNotFound();
    }

    /**
     * @test
     */
    public function 名前の最大文字数まで登録できること()
    {
        /** @var {{ model }}Model $row */
        $row = {{ model }}Model::factory()
            ->count(1)
            ->create()
            ->first();

        $name = implode('', array_pad([], 100, 'あ'));
        $response = $this->putJson(
            uri: "/api/{{ uri }}/{$row->getAttribute('id')}",
            data: [
                'name' => $name,
                /** TODO add fields */
            ],
            headers: [
                'Authorization' => 'Bearer ' . self::API_TOKEN,
            ]);
        $response->assertOk();

        $table = (new {{ model }}Model())->getTable();
        $this->assertDatabaseCount(table: $table, count: 1);
        $this->assertDatabaseHas(table: $table, data: ['name' => $name]);
    }

    /**
     * @test
     */
    public function 名前を指定していないとエラーになること()
    {
        /** @var {{ model }}Model $row */
        $row = {{ model }}Model::factory()
            ->count(1)
            ->create()
            ->first();

        $response = $this->putJson(
            uri: "/api/{{ uri }}/{$row->getAttribute('id')}",
            data: [
                'name' => '',
                /** TODO add fields */
            ],
            headers: [
                'Authorization' => 'Bearer ' . self::API_TOKEN,
            ]);
        $response->assertStatus(422);
        $this->assertArrayHasKey(key: 'name', array: $response->json('errors'));
    }

    /**
     * @test
     */
    public function 名前の最大文字数超過でエラーになること()
    {
        /** @var {{ model }}Model $row */
        $row = {{ model }}Model::factory()
            ->count(1)
            ->create()
            ->first();

        $response = $this->putJson(
            uri: "/api/{{ uri }}/{$row->getAttribute('id')}",
            data: [
                'name' => implode('', array_pad([], 101, 'あ')),
                /** TODO add fields */
            ],
            headers: [
                'Authorization' => 'Bearer ' . self::API_TOKEN,
            ]);
        $response->assertStatus(422);
        $this->assertArrayHasKey(key: 'name', array: $response->json('errors'));
    }
}
