<?php
/** @noinspection NonAsciiCharacters */
declare(strict_types=1);

namespace {{ namespace }};

use App\Models\{{ model }} as {{ model }}Model;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

final class {{ class }} extends TestCase
{
    use RefreshDatabase;
    use WithFaker;

    private const API_TOKEN = '123456789012345678901234567890123456789012345678901234567890';

    public function setUp(): void
    {
        parent::setUp();

        $user = new User();
        $user->fill([
            'name' => 'test',
            'email' => $this->faker->safeEmail(),
            'password' => password_hash('test-password', PASSWORD_DEFAULT),
            'api_token' => self::API_TOKEN,
        ]);
        $user->save();
    }

    /**
     * @test
     */
    public function 詳細が取得できること()
    {
        /** @var {{ model }}Model $row */
        $row = {{ model }}Model::factory()
            ->count(1)
            ->create()
            ->first();

        $response = $this->getJson(
            uri: "/api/{{ uri }}/{$row->getAttribute('id')}",
            headers: [
                'Authorization' => 'Bearer ' . self::API_TOKEN,
            ]);
        $response->assertOk();
        $this->assertEquals($row->toArray(), $response->json());
    }

    /**
     * @test
     */
    public function 存在しないIDを指定するとエラーになること()
    {
        $response = $this->getJson(
            uri: "/api/{{ uri }}/xxxxxxxxx",
           headers: [
               'Authorization' => 'Bearer ' . self::API_TOKEN,
           ]);
        $response->assertNotFound();
    }
}
